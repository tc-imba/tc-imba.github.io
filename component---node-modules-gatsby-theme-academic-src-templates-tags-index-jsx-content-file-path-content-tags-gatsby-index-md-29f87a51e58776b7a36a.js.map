{"version":3,"file":"component---node-modules-gatsby-theme-academic-src-templates-tags-index-jsx-content-file-path-content-tags-gatsby-index-md-29f87a51e58776b7a36a.js","mappings":"yPAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,0EAClD,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,wFCCA,MAAMU,EAAUC,IAAyB,IAAxB,KAACC,EAAI,YAAEC,GAAYF,EAClC,MAAMG,EAAUD,EAAYE,IACtBC,EAAOJ,EAAKK,OAAOC,MACnBC,EAAQC,IAASJ,GAAMK,GAAqC,UAA9BA,EAAIC,KAAKC,YAAYC,OACnDC,EAAWL,IAASJ,GAAMK,GAAqC,aAA9BA,EAAIC,KAAKC,YAAYC,OACtDE,EAAOd,EAAKe,OAASf,EAAKe,OAAOT,MAAQ,GACzCU,EAAUC,IAAYC,IAAQJ,GAAMX,GAAOA,EAAIO,KAAKS,OAAO,QAC3DhB,EAAMa,EAAQd,GACdkB,EAAcjB,EAAMA,EAAIkB,KAAO,IAC/BC,EAAiBnB,EAAMA,EAAIoB,YAAc,GAC/C,OAAO5B,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB6B,EAAAA,EAAK,CACxEC,MAAOvB,EACPqB,YAAa,kBAAkBrB,MAAYoB,KAC3CD,KAAMK,EAAAA,EAAMC,eAAeP,EAAajB,GACxCyB,SAAU,CAAC1B,KACTP,EAAAA,cAAoB,MAAO,CAC7BkC,UAAW,kBAAkBC,EAAAA,MAC5BnC,EAAAA,cAAoB,KAAM,CAC3BkC,UAAW,iBACV,IAAK3B,GAAUP,EAAAA,cAAoB,KAAM,CAC1CkC,UAAW,cACVP,IAAkBT,EAASkB,OAAS,EAAIpC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAM,YAAaA,EAAAA,cAAoBqC,EAAAA,EAAK,CACzJC,OAAQ,CAAC,GAAI,IACbrB,KAAM,QACLC,EAASqB,KAAI,CAACC,EAAMC,IAAQzC,EAAAA,cAAoB0C,EAAAA,EAAK,CACtDD,IAAKA,EACLE,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,IACH9C,EAAAA,cAAoB+C,EAAAA,EAAc,CACnC1C,KAAMmC,EACNnB,QAASA,SACF,KAAMT,EAAMwB,OAAS,EAAIpC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,KAAM,KAAM,SAAUA,EAAAA,cAAoBqC,EAAAA,EAAK,CAC7IC,OAAQ,CAAC,GAAI,IACbrB,KAAM,QACLL,EAAM2B,KAAI,CAACC,EAAMC,IAAQzC,EAAAA,cAAoB0C,EAAAA,EAAK,CACnDD,IAAKA,EACLE,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACH9C,EAAAA,cAAoBgD,EAAAA,EAAU,CAC/B3C,KAAMmC,EACNnB,QAASA,SACF,KAAK,EAyGD,SAAS4B,EAAiBxD,GACvC,OAAOO,EAAAA,cAAoBG,EAASV,EAAOO,EAAAA,cAAoBkD,EAAqBzD,GACtF,C","sources":["webpack://tc-imba.github.io/./content/tags/gatsby/index.md","webpack://tc-imba.github.io/./node_modules/gatsby-theme-academic/src/templates/tags/index.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"A framework built over ReactJS to generate static page web application.\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/tc-imba.github.io/tc-imba.github.io/content/tags/gatsby/index.md\";\nimport {Container, Row, Col} from 'rsuite';\nimport {graphql} from 'gatsby';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Header from '../../components/PageLayout/Header';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport PostCard from '../../components/PostCard';\nimport ResearchCard from '../../components/ResearchCard';\nimport SEO from '../../components/Seo';\nimport Utils from '../../utils/pageUtils.mjs';\nimport * as style from './tags.module.less';\nconst TagPage = ({data, pageContext}) => {\n  const tagName = pageContext.tag;\n  const docs = data.allMdx.edges;\n  const posts = _.filter(docs, doc => doc.node.frontmatter.type === 'posts');\n  const research = _.filter(docs, doc => doc.node.frontmatter.type === 'research');\n  const tags = data.allTag ? data.allTag.edges : [];\n  const tagsMap = _.mapValues(_.keyBy(tags, tag => tag.node.name), 'node');\n  const tag = tagsMap[tagName];\n  const tagPagePath = tag ? tag.path : '#';\n  const tagDescription = tag ? tag.description : '';\n  return React.createElement(React.Fragment, null, React.createElement(SEO, {\n    title: tagName,\n    description: `All post about ${tagName}. ${tagDescription} `,\n    path: Utils.resolvePageUrl(tagPagePath, tag),\n    keywords: [tagName]\n  }), React.createElement(\"div\", {\n    className: `marginTopTitle ${style.tagsList}`\n  }, React.createElement(\"h1\", {\n    className: \"titleSeparate\"\n  }, \"#\", tagName), React.createElement(\"h4\", {\n    className: \"textCenter\"\n  }, tagDescription)), research.length > 0 ? React.createElement(React.Fragment, null, React.createElement(\"h2\", null, \"Research\"), React.createElement(Row, {\n    gutter: [20, 20],\n    type: \"flex\"\n  }, research.map((post, key) => React.createElement(Col, {\n    key: key,\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24\n  }, React.createElement(ResearchCard, {\n    data: post,\n    tagsMap: tagsMap\n  }))))) : null, posts.length > 0 ? React.createElement(React.Fragment, null, React.createElement(\"h2\", null, \"Posts\"), React.createElement(Row, {\n    gutter: [20, 20],\n    type: \"flex\"\n  }, posts.map((post, key) => React.createElement(Col, {\n    key: key,\n    xs: 24,\n    sm: 24,\n    md: 12,\n    lg: 8\n  }, React.createElement(PostCard, {\n    data: post,\n    tagsMap: tagsMap\n  }))))) : null);\n};\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allTag: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.shape({\n        node: PropTypes.shape({\n          color: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired,\n          description: PropTypes.string,\n          path: PropTypes.string\n        })\n      })).isRequired\n    }).isRequired,\n    allMdx: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.shape({\n        node: PropTypes.shape({\n          name: PropTypes.string.isRequired,\n          childImageSharp: PropTypes.shape({\n            gatsbyImageData: PropTypes.object.isRequired\n          }).isRequired\n        }).isRequired\n      })).isRequired\n    }).isRequired\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired\n  }).isRequired\n};\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allTag {\n      edges {\n        node {\n          color\n          name\n          description\n          path\n        }\n      }\n    }\n    allMdx(\n      filter: {\n        frontmatter: { tags: { in: [$tag] } } \n        internal: {\n          contentFilePath: { regex: \"/index.mdx?$/\" }\n        }\n      }\n      sort: {frontmatter: {date: DESC}}\n    ) {\n      edges {\n        node {\n          frontmatter {\n            cover {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 320\n                  height: 180\n                  transformOptions: {\n                    fit: CONTAIN\n                  }\n                )\n              }\n            }\n            \n          }\n          fields {\n            slug {\n              links {\n                name\n                url\n              }\n              date\n              venue\n              authors\n              path\n              title\n              tags\n              excerpt\n              type\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            gatsbyImageData(\n              layout: CONSTRAINED\n              width: 600\n            )\n          }\n        }\n      }\n    }\n  }\n`;\nTagPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(TagPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","TagPage","_ref","data","pageContext","tagName","tag","docs","allMdx","edges","posts","_filter","doc","node","frontmatter","type","research","tags","allTag","tagsMap","_mapValues","_keyBy","name","tagPagePath","path","tagDescription","description","SEO","title","Utils","resolvePageUrl","keywords","className","style","length","Row","gutter","map","post","key","Col","xs","sm","md","lg","ResearchCard","PostCard","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}