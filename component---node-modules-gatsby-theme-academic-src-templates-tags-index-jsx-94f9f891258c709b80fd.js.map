{"version":3,"file":"component---node-modules-gatsby-theme-academic-src-templates-tags-index-jsx-94f9f891258c709b80fd.js","mappings":"iSAsMA,UAlLgBA,IAGT,IAHU,KACfC,EAAI,YACJC,GACDF,EACC,MAAMG,EAAUD,EAAYE,IAMtBC,EAAOJ,EAAKK,OAAOC,MACnBC,EAAQC,IAASJ,GAAOK,GAAsC,UAA9BA,EAAIC,KAAKC,YAAYC,OACrDC,EAAWL,IAASJ,GAAOK,GAAsC,aAA9BA,EAAIC,KAAKC,YAAYC,OACxDE,EAAOd,EAAKe,OAASf,EAAKe,OAAOT,MAAQ,GACzCU,EAAUC,IAAYC,IAAQJ,GAAOX,GAAQA,EAAIO,KAAKS,OAAO,QAE7DhB,EAAMa,EAAQd,GACdkB,EAAcjB,EAAMA,EAAIkB,KAAO,IAC/BC,EAAiBnB,EAAMA,EAAIoB,YAAc,GAE/C,OACEC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACC,EAAAA,EAAG,CACFC,MAAOxB,EACPqB,YAAa,kBAAkBrB,MAAYoB,KAC3CD,KAAMM,EAAAA,EAAMC,eAAeR,EAAajB,GACxC0B,SAAU,CAAC3B,KAEbsB,EAAAA,cAAA,OAAKM,UAAW,kBAAkBC,EAAAA,MAChCP,EAAAA,cAAA,MAAIM,UAAU,iBAAgB,IAE3B5B,GAKHsB,EAAAA,cAAA,MAAIM,UAAU,cACXR,IAGJT,EAASmB,OAAS,EACjBR,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAACS,EAAAA,EAAG,CAACC,OAAQ,CAAC,GAAI,IAAKtB,KAAK,QACzBC,EAASsB,KAAI,CAACC,EAAMC,IAEnBb,EAAAA,cAACc,EAAAA,EAAG,CAACD,IAAKA,EAAKE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACzClB,EAAAA,cAACmB,EAAAA,EAAY,CAAC3C,KAAMoC,EAAMpB,QAASA,SAKzC,KACHT,EAAMyB,OAAS,EACdR,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UAAI,SACJA,EAAAA,cAACS,EAAAA,EAAG,CAACC,OAAQ,CAAC,GAAI,IAAKtB,KAAK,QACzBL,EAAM4B,KAAI,CAACC,EAAMC,IAEhBb,EAAAA,cAACc,EAAAA,EAAG,CAACD,IAAKA,EAAKE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzClB,EAAAA,cAACoB,EAAAA,EAAQ,CAAC5C,KAAMoC,EAAMpB,QAASA,SAKrC,KACH,C","sources":["webpack://tc-imba.github.io/./node_modules/gatsby-theme-academic/src/templates/tags/index.jsx"],"sourcesContent":["/* eslint-disable react/forbid-prop-types */\r\n/* Vendor imports */\r\nimport { Container, Row, Col } from 'rsuite';\r\nimport { graphql } from 'gatsby';\r\n// import Img from 'gatsby-image';\r\n/* App imports */\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport Header from '../../components/PageLayout/Header';\r\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\r\nimport PostCard from '../../components/PostCard';\r\n// import Statistics from '../../../content/statistics.json';\r\nimport ResearchCard from '../../components/ResearchCard';\r\nimport SEO from '../../components/Seo';\r\nimport Utils from '../../utils/pageUtils.mjs';\r\n\r\nimport * as style from './tags.module.less';\r\n\r\nconst TagPage = ({\r\n  data,\r\n  pageContext,\r\n}) => {\r\n  const tagName = pageContext.tag;\r\n  // const { tag } = pageContext;\r\n  // const tagName = Statistics.tags[tag].name || tag;\r\n  // const tagPagePath = siteMetadata.pages.tags;\r\n  // const tagImage = data.allFile.edges.find((edge) => edge.node.name === tag).node\r\n  //   .childImageSharp.fluid;\r\n  const docs = data.allMdx.edges;\r\n  const posts = _.filter(docs, (doc) => doc.node.frontmatter.type === 'posts');\r\n  const research = _.filter(docs, (doc) => doc.node.frontmatter.type === 'research');\r\n  const tags = data.allTag ? data.allTag.edges : [];\r\n  const tagsMap = _.mapValues(_.keyBy(tags, (tag) => tag.node.name), 'node');\r\n\r\n  const tag = tagsMap[tagName];\r\n  const tagPagePath = tag ? tag.path : '#';\r\n  const tagDescription = tag ? tag.description : '';\r\n\r\n  return (\r\n    <>\r\n      <SEO\r\n        title={tagName}\r\n        description={`All post about ${tagName}. ${tagDescription} `}\r\n        path={Utils.resolvePageUrl(tagPagePath, tag)}\r\n        keywords={[tagName]}\r\n      />\r\n      <div className={`marginTopTitle ${style.tagsList}`}>\r\n        <h1 className=\"titleSeparate\">\r\n          #\r\n          {tagName}\r\n        </h1>\r\n        {/* <div className={style.bannerImgContainer}> */}\r\n        {/*  <Img className={style.bannerImg} fluid={tagImage} alt={tagName} /> */}\r\n        {/* </div> */}\r\n        <h4 className=\"textCenter\">\r\n          {tagDescription}\r\n        </h4>\r\n      </div>\r\n      {research.length > 0 ? (\r\n        <>\r\n          <h2>Research</h2>\r\n          <Row gutter={[20, 20]} type=\"flex\">\r\n            {research.map((post, key) => (\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              <Col key={key} xs={24} sm={24} md={24} lg={24}>\r\n                <ResearchCard data={post} tagsMap={tagsMap} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </>\r\n      ) : null}\r\n      {posts.length > 0 ? (\r\n        <>\r\n          <h2>Posts</h2>\r\n          <Row gutter={[20, 20]} type=\"flex\">\r\n            {posts.map((post, key) => (\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              <Col key={key} xs={24} sm={24} md={12} lg={8}>\r\n                <PostCard data={post} tagsMap={tagsMap} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nTagPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    allTag: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            color: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            description: PropTypes.string,\r\n            path: PropTypes.string,\r\n          }),\r\n        }),\r\n      ).isRequired,\r\n    }).isRequired,\r\n    allMdx: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    }).isRequired,\r\n    allFile: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            childImageSharp: PropTypes.shape({\r\n              gatsbyImageData: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        }),\r\n      ).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String!) {\r\n    allTag {\r\n      edges {\r\n        node {\r\n          color\r\n          name\r\n          description\r\n          path\r\n        }\r\n      }\r\n    }\r\n    allMdx(\r\n      filter: {\r\n        frontmatter: { tags: { in: [$tag] } } \r\n        internal: {\r\n          contentFilePath: { regex: \"/index.mdx?$/\" }\r\n        }\r\n      }\r\n      sort: {frontmatter: {date: DESC}}\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            cover {\r\n              childImageSharp {\r\n                gatsbyImageData(\r\n                  layout: CONSTRAINED\r\n                  width: 320\r\n                  height: 180\r\n                  transformOptions: {\r\n                    fit: CONTAIN\r\n                  }\r\n                )\r\n              }\r\n            }\r\n            \r\n          }\r\n          fields {\r\n            slug {\r\n              links {\r\n                name\r\n                url\r\n              }\r\n              date\r\n              venue\r\n              authors\r\n              path\r\n              title\r\n              tags\r\n              excerpt\r\n              type\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\r\n      edges {\r\n        node {\r\n          name\r\n          childImageSharp {\r\n            gatsbyImageData(\r\n              layout: CONSTRAINED\r\n              width: 600\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default TagPage;\r\n"],"names":["_ref","data","pageContext","tagName","tag","docs","allMdx","edges","posts","_filter","doc","node","frontmatter","type","research","tags","allTag","tagsMap","_mapValues","_keyBy","name","tagPagePath","path","tagDescription","description","React","SEO","title","Utils","resolvePageUrl","keywords","className","style","length","Row","gutter","map","post","key","Col","xs","sm","md","lg","ResearchCard","PostCard"],"sourceRoot":""}